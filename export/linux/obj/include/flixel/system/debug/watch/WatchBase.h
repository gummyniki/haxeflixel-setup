// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_system_debug_watch_WatchBase
#define INCLUDED_flixel_system_debug_watch_WatchBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,WatchBase)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flixel{
namespace _hx_system{
namespace debug{
namespace watch{


class HXCPP_CLASS_ATTRIBUTES WatchBase_obj : public  ::flixel::_hx_system::debug::Window_obj
{
	public:
		typedef  ::flixel::_hx_system::debug::Window_obj super;
		typedef WatchBase_obj OBJ_;
		WatchBase_obj();

	public:
		enum { _hx_ClassId = 0x27ebba19 };

		void __construct(::String title, ::openfl::display::BitmapData icon, ::Dynamic width, ::Dynamic height, ::Dynamic resizable, ::openfl::geom::Rectangle bounds, ::Dynamic closable, ::Dynamic alwaysOnTop);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.watch.WatchBase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.debug.watch.WatchBase"); }
		static ::hx::ObjectPtr< WatchBase_obj > __new(::String title, ::openfl::display::BitmapData icon, ::Dynamic width, ::Dynamic height, ::Dynamic resizable, ::openfl::geom::Rectangle bounds, ::Dynamic closable, ::Dynamic alwaysOnTop);
		static ::hx::ObjectPtr< WatchBase_obj > __alloc(::hx::Ctx *_hx_ctx,::String title, ::openfl::display::BitmapData icon, ::Dynamic width, ::Dynamic height, ::Dynamic resizable, ::openfl::geom::Rectangle bounds, ::Dynamic closable, ::Dynamic alwaysOnTop);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~WatchBase_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("WatchBase",e0,dd,cc,d6); }

};

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace watch

#endif /* INCLUDED_flixel_system_debug_watch_WatchBase */ 
