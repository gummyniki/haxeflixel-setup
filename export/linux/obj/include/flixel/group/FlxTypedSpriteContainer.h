// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#define INCLUDED_flixel_group_FlxTypedSpriteContainer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace group{


class HXCPP_CLASS_ATTRIBUTES FlxTypedSpriteContainer_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef FlxTypedSpriteContainer_obj OBJ_;
		FlxTypedSpriteContainer_obj();

	public:
		enum { _hx_ClassId = 0x5f6ac8a1 };

		void __construct( ::Dynamic x, ::Dynamic y, ::Dynamic maxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.group.FlxTypedSpriteContainer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.group.FlxTypedSpriteContainer"); }
		static ::hx::ObjectPtr< FlxTypedSpriteContainer_obj > __new( ::Dynamic x, ::Dynamic y, ::Dynamic maxSize);
		static ::hx::ObjectPtr< FlxTypedSpriteContainer_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic x, ::Dynamic y, ::Dynamic maxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxTypedSpriteContainer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxTypedSpriteContainer",a4,ac,46,cc); }

		void initGroup(int maxSize);

		void draw();

		 ::flixel::group::FlxTypedGroup set_group( ::flixel::group::FlxTypedGroup value);

		 ::flixel::FlxCamera set_camera( ::flixel::FlxCamera value);

		::Array< ::Dynamic> set_cameras(::Array< ::Dynamic> value);

};

} // end namespace flixel
} // end namespace group

#endif /* INCLUDED_flixel_group_FlxTypedSpriteContainer */ 
