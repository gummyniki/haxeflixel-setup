// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#include <flixel/group/FlxTypedSpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_group__FlxSpriteContainer_SpriteContainer
#include <flixel/group/_FlxSpriteContainer/SpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0575440fd135edf2_84_new,"flixel.group._FlxSpriteContainer.SpriteContainer","new",0x7f6e9108,"flixel.group._FlxSpriteContainer.SpriteContainer.new","flixel/group/FlxSpriteContainer.hx",84,0x1b8bad31)
HX_LOCAL_STACK_FRAME(_hx_pos_0575440fd135edf2_91_get_container,"flixel.group._FlxSpriteContainer.SpriteContainer","get_container",0x06d86bc0,"flixel.group._FlxSpriteContainer.SpriteContainer.get_container","flixel/group/FlxSpriteContainer.hx",91,0x1b8bad31)
HX_LOCAL_STACK_FRAME(_hx_pos_0575440fd135edf2_96_getCamerasLegacy,"flixel.group._FlxSpriteContainer.SpriteContainer","getCamerasLegacy",0x7ad3eef9,"flixel.group._FlxSpriteContainer.SpriteContainer.getCamerasLegacy","flixel/group/FlxSpriteContainer.hx",96,0x1b8bad31)
HX_LOCAL_STACK_FRAME(_hx_pos_0575440fd135edf2_101_getCameras,"flixel.group._FlxSpriteContainer.SpriteContainer","getCameras",0x896b3490,"flixel.group._FlxSpriteContainer.SpriteContainer.getCameras","flixel/group/FlxSpriteContainer.hx",101,0x1b8bad31)
namespace flixel{
namespace group{
namespace _FlxSpriteContainer{

void SpriteContainer_obj::__construct( ::flixel::group::FlxTypedSpriteContainer parent,int maxSize){
            	HX_STACKFRAME(&_hx_pos_0575440fd135edf2_84_new)
HXLINE(  85)		this->parentSprite = parent;
HXLINE(  86)		super::__construct(maxSize);
            	}

Dynamic SpriteContainer_obj::__CreateEmpty() { return new SpriteContainer_obj; }

void *SpriteContainer_obj::_hx_vtable = 0;

Dynamic SpriteContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SpriteContainer_obj > _hx_result = new SpriteContainer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SpriteContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7bcb14f6 || inClassId==(int)0x7ccf8994;
	}
}

 ::flixel::group::FlxTypedContainer SpriteContainer_obj::get_container(){
            	HX_STACKFRAME(&_hx_pos_0575440fd135edf2_91_get_container)
HXDLIN(  91)		return this->parentSprite->get_container();
            	}


::Array< ::Dynamic> SpriteContainer_obj::getCamerasLegacy(){
            	HX_STACKFRAME(&_hx_pos_0575440fd135edf2_96_getCamerasLegacy)
HXDLIN(  96)		if (::hx::IsNotNull( this->_cameras )) {
HXDLIN(  96)			return this->_cameras;
            		}
            		else {
HXDLIN(  96)			return this->parentSprite->getCamerasLegacy();
            		}
HXDLIN(  96)		return null();
            	}


::Array< ::Dynamic> SpriteContainer_obj::getCameras(){
            	HX_STACKFRAME(&_hx_pos_0575440fd135edf2_101_getCameras)
HXDLIN( 101)		if (::hx::IsNotNull( this->_cameras )) {
HXDLIN( 101)			return this->_cameras;
            		}
            		else {
HXDLIN( 101)			return this->parentSprite->getCameras();
            		}
HXDLIN( 101)		return null();
            	}



::hx::ObjectPtr< SpriteContainer_obj > SpriteContainer_obj::__new( ::flixel::group::FlxTypedSpriteContainer parent,int maxSize) {
	::hx::ObjectPtr< SpriteContainer_obj > __this = new SpriteContainer_obj();
	__this->__construct(parent,maxSize);
	return __this;
}

::hx::ObjectPtr< SpriteContainer_obj > SpriteContainer_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::group::FlxTypedSpriteContainer parent,int maxSize) {
	SpriteContainer_obj *__this = (SpriteContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SpriteContainer_obj), true, "flixel.group._FlxSpriteContainer.SpriteContainer"));
	*(void **)__this = SpriteContainer_obj::_hx_vtable;
	__this->__construct(parent,maxSize);
	return __this;
}

SpriteContainer_obj::SpriteContainer_obj()
{
}

void SpriteContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpriteContainer);
	HX_MARK_MEMBER_NAME(parentSprite,"parentSprite");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SpriteContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentSprite,"parentSprite");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SpriteContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"getCameras") ) { return ::hx::Val( getCameras_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parentSprite") ) { return ::hx::Val( parentSprite ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_container") ) { return ::hx::Val( get_container_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCamerasLegacy") ) { return ::hx::Val( getCamerasLegacy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SpriteContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"parentSprite") ) { parentSprite=inValue.Cast<  ::flixel::group::FlxTypedSpriteContainer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpriteContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parentSprite",cf,90,ff,d5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SpriteContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteContainer */ ,(int)offsetof(SpriteContainer_obj,parentSprite),HX_("parentSprite",cf,90,ff,d5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SpriteContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String SpriteContainer_obj_sMemberFields[] = {
	HX_("parentSprite",cf,90,ff,d5),
	HX_("get_container",18,49,d7,80),
	HX_("getCamerasLegacy",a1,f8,e7,21),
	HX_("getCameras",38,10,93,32),
	::String(null()) };

::hx::Class SpriteContainer_obj::__mClass;

void SpriteContainer_obj::__register()
{
	SpriteContainer_obj _hx_dummy;
	SpriteContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.group._FlxSpriteContainer.SpriteContainer",16,ad,07,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SpriteContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SpriteContainer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpriteContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpriteContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace group
} // end namespace _FlxSpriteContainer
