// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Icon
#include <flixel/system/debug/Icon.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Icon_DrawDebug
#include <flixel/system/debug/_Icon/DrawDebug.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_ToggleBounds
#include <flixel/system/debug/interaction/tools/ToggleBounds.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1074f3f7efdcd5ae_23_new,"flixel.system.debug.interaction.tools.ToggleBounds","new",0x2a585212,"flixel.system.debug.interaction.tools.ToggleBounds.new","flixel/system/debug/interaction/tools/ToggleBounds.hx",23,0x3ea2f7db)
HX_LOCAL_STACK_FRAME(_hx_pos_1074f3f7efdcd5ae_26_init,"flixel.system.debug.interaction.tools.ToggleBounds","init",0xdfa8351e,"flixel.system.debug.interaction.tools.ToggleBounds.init","flixel/system/debug/interaction/tools/ToggleBounds.hx",26,0x3ea2f7db)
HX_LOCAL_STACK_FRAME(_hx_pos_1074f3f7efdcd5ae_40_update,"flixel.system.debug.interaction.tools.ToggleBounds","update",0x31af9f97,"flixel.system.debug.interaction.tools.ToggleBounds.update","flixel/system/debug/interaction/tools/ToggleBounds.hx",40,0x3ea2f7db)
HX_LOCAL_STACK_FRAME(_hx_pos_1074f3f7efdcd5ae_47_onButtonClicked,"flixel.system.debug.interaction.tools.ToggleBounds","onButtonClicked",0x3f28eae8,"flixel.system.debug.interaction.tools.ToggleBounds.onButtonClicked","flixel/system/debug/interaction/tools/ToggleBounds.hx",47,0x3ea2f7db)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{
namespace tools{

void ToggleBounds_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1074f3f7efdcd5ae_23_new)
HXDLIN(  23)		super::__construct();
            	}

Dynamic ToggleBounds_obj::__CreateEmpty() { return new ToggleBounds_obj; }

void *ToggleBounds_obj::_hx_vtable = 0;

Dynamic ToggleBounds_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ToggleBounds_obj > _hx_result = new ToggleBounds_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ToggleBounds_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1361d5a9) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x12ae0f96 || inClassId==(int)0x1361d5a9;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::flixel::_hx_system::debug::interaction::tools::Tool ToggleBounds_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){
            	HX_STACKFRAME(&_hx_pos_1074f3f7efdcd5ae_26_init)
HXLINE(  27)		this->super::init(brain);
HXLINE(  29)		this->_name = HX_("Toggle Debug Draw",1d,76,e8,10);
HXLINE(  30)		this->setButton(::flixel::_hx_system::debug::Icon_obj::drawDebug);
HXLINE(  31)		this->button->toggleMode = false;
HXLINE(  36)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


void ToggleBounds_obj::update(){
            	HX_STACKFRAME(&_hx_pos_1074f3f7efdcd5ae_40_update)
HXLINE(  41)		bool _hx_tmp;
HXDLIN(  41)		if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE(  41)			_hx_tmp = (this->_brain->selectedItems->countLiving() > 0);
            		}
            		else {
HXLINE(  41)			_hx_tmp = false;
            		}
HXDLIN(  41)		this->button->enabled = _hx_tmp;
HXLINE(  42)		this->button->mouseEnabled = this->button->enabled;
HXLINE(  43)		Float _hx_tmp1;
HXDLIN(  43)		if (this->button->enabled) {
HXLINE(  43)			_hx_tmp1 = ((Float)0.3);
            		}
            		else {
HXLINE(  43)			_hx_tmp1 = ((Float)0.1);
            		}
HXDLIN(  43)		this->button->set_alpha(_hx_tmp1);
            	}


void ToggleBounds_obj::onButtonClicked(){
            	HX_STACKFRAME(&_hx_pos_1074f3f7efdcd5ae_47_onButtonClicked)
            	}



::hx::ObjectPtr< ToggleBounds_obj > ToggleBounds_obj::__new() {
	::hx::ObjectPtr< ToggleBounds_obj > __this = new ToggleBounds_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ToggleBounds_obj > ToggleBounds_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ToggleBounds_obj *__this = (ToggleBounds_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ToggleBounds_obj), true, "flixel.system.debug.interaction.tools.ToggleBounds"));
	*(void **)__this = ToggleBounds_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ToggleBounds_obj::ToggleBounds_obj()
{
}

::hx::Val ToggleBounds_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onButtonClicked") ) { return ::hx::Val( onButtonClicked_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ToggleBounds_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ToggleBounds_obj_sStaticStorageInfo = 0;
#endif

static ::String ToggleBounds_obj_sMemberFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("update",09,86,05,87),
	HX_("onButtonClicked",36,a6,0f,a0),
	::String(null()) };

::hx::Class ToggleBounds_obj::__mClass;

void ToggleBounds_obj::__register()
{
	ToggleBounds_obj _hx_dummy;
	ToggleBounds_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.interaction.tools.ToggleBounds",20,a1,e5,44);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ToggleBounds_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ToggleBounds_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ToggleBounds_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ToggleBounds_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
} // end namespace tools
