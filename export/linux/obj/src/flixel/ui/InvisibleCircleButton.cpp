// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_ui_InvisibleCircleButton
#include <flixel/ui/InvisibleCircleButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_222_new,"flixel.ui.InvisibleCircleButton","new",0x540619f9,"flixel.ui.InvisibleCircleButton.new","flixel/ui/FlxVirtualStick.hx",222,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_219_get_radius,"flixel.ui.InvisibleCircleButton","get_radius",0x99bd4ba2,"flixel.ui.InvisibleCircleButton.get_radius","flixel/ui/FlxVirtualStick.hx",219,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_229_draw,"flixel.ui.InvisibleCircleButton","draw",0x2abe484b,"flixel.ui.InvisibleCircleButton.draw","flixel/ui/FlxVirtualStick.hx",229,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_237_checkInput,"flixel.ui.InvisibleCircleButton","checkInput",0xc64cd1a9,"flixel.ui.InvisibleCircleButton.checkInput","flixel/ui/FlxVirtualStick.hx",237,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_248_updateButton,"flixel.ui.InvisibleCircleButton","updateButton",0xa8624422,"flixel.ui.InvisibleCircleButton.updateButton","flixel/ui/FlxVirtualStick.hx",248,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_260_onUpHandler,"flixel.ui.InvisibleCircleButton","onUpHandler",0xe2bbb029,"flixel.ui.InvisibleCircleButton.onUpHandler","flixel/ui/FlxVirtualStick.hx",260,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_266_overlapsPoint,"flixel.ui.InvisibleCircleButton","overlapsPoint",0x4d73687d,"flixel.ui.InvisibleCircleButton.overlapsPoint","flixel/ui/FlxVirtualStick.hx",266,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_277_calcDeltaTo,"flixel.ui.InvisibleCircleButton","calcDeltaTo",0xf77ca617,"flixel.ui.InvisibleCircleButton.calcDeltaTo","flixel/ui/FlxVirtualStick.hx",277,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_d10b1ef59f6e9757_289_calcDeltaToPointer,"flixel.ui.InvisibleCircleButton","calcDeltaToPointer",0x27ff4366,"flixel.ui.InvisibleCircleButton.calcDeltaToPointer","flixel/ui/FlxVirtualStick.hx",289,0xf07a354f)
namespace flixel{
namespace ui{

void InvisibleCircleButton_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,Float radius, ::Dynamic onClick){
            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_222_new)
HXLINE( 223)		super::__construct(x,y,onClick);
HXLINE( 224)		int size = ::Math_obj::ceil((radius * ( (Float)(2) )));
HXLINE( 225)		this->loadGraphic(::flixel::FlxG_obj::bitmap->create(size,(size * 4),-1,null(),null()),true,size,size,null(),null());
            	}

Dynamic InvisibleCircleButton_obj::__CreateEmpty() { return new InvisibleCircleButton_obj; }

void *InvisibleCircleButton_obj::_hx_vtable = 0;

Dynamic InvisibleCircleButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InvisibleCircleButton_obj > _hx_result = new InvisibleCircleButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool InvisibleCircleButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x596ee395) {
		if (inClassId<=(int)0x313a21df) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x313a21df;
			}
		} else {
			return inClassId==(int)0x596ee395;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

Float InvisibleCircleButton_obj::get_radius(){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_219_get_radius)
HXDLIN( 219)		return (( (Float)(this->frameWidth) ) * ((Float)0.5));
            	}


HX_DEFINE_DYNAMIC_FUNC0(InvisibleCircleButton_obj,get_radius,return )

void InvisibleCircleButton_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_229_draw)
            	}


bool InvisibleCircleButton_obj::checkInput( ::flixel::input::FlxPointer pointer,::Dynamic input, ::flixel::math::FlxBasePoint justPressedPosition, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_237_checkInput)
HXLINE( 238)		if (this->super::checkInput(pointer,input,justPressedPosition,camera)) {
HXLINE( 240)			this->lastPointer = pointer;
HXLINE( 241)			return true;
            		}
HXLINE( 244)		return false;
            	}


void InvisibleCircleButton_obj::updateButton(){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_248_updateButton)
HXLINE( 249)		if (::hx::IsNotNull( this->currentInput )) {
HXLINE( 251)			if (::flixel::input::IFlxInput_obj::get_justReleased(this->currentInput)) {
HXLINE( 252)				this->onUpHandler();
            			}
HXLINE( 253)			return;
            		}
HXLINE( 256)		this->super::updateButton();
            	}


void InvisibleCircleButton_obj::onUpHandler(){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_260_onUpHandler)
HXLINE( 261)		this->super::onUpHandler();
HXLINE( 262)		this->lastPointer = null();
            	}


bool InvisibleCircleButton_obj::overlapsPoint( ::flixel::math::FlxBasePoint point,::hx::Null< bool >  __o_inScreenSpace, ::flixel::FlxCamera camera){
            		bool inScreenSpace = __o_inScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_266_overlapsPoint)
HXLINE( 267)		if (!(inScreenSpace)) {
HXLINE( 268)			Float x = (this->x + (( (Float)(this->frameWidth) ) * ((Float)0.5)));
HXDLIN( 268)			Float y = (this->y + (( (Float)(this->frameWidth) ) * ((Float)0.5)));
HXDLIN( 268)			return ((((point->x - x) * (point->x - x)) + ((point->y - y) * (point->y - y))) < ((( (Float)(this->frameWidth) ) * ((Float)0.5)) * (( (Float)(this->frameWidth) ) * ((Float)0.5))));
            		}
HXLINE( 270)		if (::hx::IsNull( camera )) {
HXLINE( 271)			camera = this->getCameras()->__get(0).StaticCast<  ::flixel::FlxCamera >();
            		}
HXLINE( 273)		 ::flixel::math::FlxBasePoint this1 = this->calcDeltaTo(point,camera,this->_point);
HXDLIN( 273)		return (((this1->x * this1->x) + (this1->y * this1->y)) < ((( (Float)(this->frameWidth) ) * ((Float)0.5)) * (( (Float)(this->frameWidth) ) * ((Float)0.5))));
            	}


 ::flixel::math::FlxBasePoint InvisibleCircleButton_obj::calcDeltaTo( ::flixel::math::FlxBasePoint point, ::flixel::FlxCamera camera, ::flixel::math::FlxBasePoint result){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_277_calcDeltaTo)
HXLINE( 278)		if (::hx::IsNull( result )) {
HXLINE( 279)			 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 279)			point1->_inPool = false;
HXDLIN( 279)			result = point1;
            		}
HXLINE( 281)		Float xPos = ((point->x - camera->scroll->x) - (( (Float)(this->frameWidth) ) * ((Float)0.5)));
HXLINE( 282)		Float yPos = ((point->y - camera->scroll->y) - (( (Float)(this->frameWidth) ) * ((Float)0.5)));
HXLINE( 283)		this->getScreenPosition(result,camera);
HXLINE( 284)		{
HXLINE( 284)			 ::flixel::math::FlxBasePoint _this = point;
HXDLIN( 284)			if (_this->_weak) {
HXLINE( 284)				_this->put();
            			}
            		}
HXLINE( 285)		result->set_x((result->x - xPos));
HXDLIN( 285)		result->set_y((result->y - yPos));
HXDLIN( 285)		 ::flixel::math::FlxBasePoint this1 = result;
HXDLIN( 285)		this1->set_x((this1->x * ( (Float)(-1) )));
HXDLIN( 285)		this1->set_y((this1->y * ( (Float)(-1) )));
HXDLIN( 285)		return this1;
            	}


HX_DEFINE_DYNAMIC_FUNC3(InvisibleCircleButton_obj,calcDeltaTo,return )

 ::flixel::math::FlxBasePoint InvisibleCircleButton_obj::calcDeltaToPointer( ::flixel::FlxCamera camera, ::flixel::math::FlxBasePoint result){
            	HX_STACKFRAME(&_hx_pos_d10b1ef59f6e9757_289_calcDeltaToPointer)
HXLINE( 290)		 ::flixel::input::FlxPointer point = this->lastPointer;
HXDLIN( 290)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 290)		point1->_inPool = false;
HXDLIN( 290)		 ::flixel::math::FlxBasePoint point2 = point1;
HXDLIN( 290)		point2->_weak = true;
HXDLIN( 290)		 ::flixel::math::FlxBasePoint point3 = point->getViewPosition(camera,point2);
HXLINE( 291)		return this->calcDeltaTo(point3,camera,result);
            	}


HX_DEFINE_DYNAMIC_FUNC2(InvisibleCircleButton_obj,calcDeltaToPointer,return )


::hx::ObjectPtr< InvisibleCircleButton_obj > InvisibleCircleButton_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,Float radius, ::Dynamic onClick) {
	::hx::ObjectPtr< InvisibleCircleButton_obj > __this = new InvisibleCircleButton_obj();
	__this->__construct(__o_x,__o_y,radius,onClick);
	return __this;
}

::hx::ObjectPtr< InvisibleCircleButton_obj > InvisibleCircleButton_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,Float radius, ::Dynamic onClick) {
	InvisibleCircleButton_obj *__this = (InvisibleCircleButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InvisibleCircleButton_obj), true, "flixel.ui.InvisibleCircleButton"));
	*(void **)__this = InvisibleCircleButton_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,radius,onClick);
	return __this;
}

InvisibleCircleButton_obj::InvisibleCircleButton_obj()
{
}

void InvisibleCircleButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InvisibleCircleButton);
	HX_MARK_MEMBER_NAME(lastPointer,"lastPointer");
	 ::flixel::ui::FlxTypedButton_flixel_FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void InvisibleCircleButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lastPointer,"lastPointer");
	 ::flixel::ui::FlxTypedButton_flixel_FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val InvisibleCircleButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_radius() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_radius") ) { return ::hx::Val( get_radius_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkInput") ) { return ::hx::Val( checkInput_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastPointer") ) { return ::hx::Val( lastPointer ); }
		if (HX_FIELD_EQ(inName,"onUpHandler") ) { return ::hx::Val( onUpHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcDeltaTo") ) { return ::hx::Val( calcDeltaTo_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateButton") ) { return ::hx::Val( updateButton_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return ::hx::Val( overlapsPoint_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"calcDeltaToPointer") ) { return ::hx::Val( calcDeltaToPointer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InvisibleCircleButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"lastPointer") ) { lastPointer=inValue.Cast<  ::flixel::input::FlxPointer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InvisibleCircleButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("lastPointer",07,75,cd,05));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InvisibleCircleButton_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::FlxPointer */ ,(int)offsetof(InvisibleCircleButton_obj,lastPointer),HX_("lastPointer",07,75,cd,05)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InvisibleCircleButton_obj_sStaticStorageInfo = 0;
#endif

static ::String InvisibleCircleButton_obj_sMemberFields[] = {
	HX_("lastPointer",07,75,cd,05),
	HX_("get_radius",1b,40,7e,a1),
	HX_("draw",04,2c,70,42),
	HX_("checkInput",22,c6,0d,ce),
	HX_("updateButton",db,08,a4,d9),
	HX_("onUpHandler",90,a5,d0,a3),
	HX_("overlapsPoint",a4,c5,bd,35),
	HX_("calcDeltaTo",7e,9b,91,b8),
	HX_("calcDeltaToPointer",df,d8,ee,bb),
	::String(null()) };

::hx::Class InvisibleCircleButton_obj::__mClass;

void InvisibleCircleButton_obj::__register()
{
	InvisibleCircleButton_obj _hx_dummy;
	InvisibleCircleButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.ui.InvisibleCircleButton",87,a9,a9,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InvisibleCircleButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InvisibleCircleButton_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InvisibleCircleButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InvisibleCircleButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
