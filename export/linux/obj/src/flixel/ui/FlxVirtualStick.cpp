// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteContainer
#include <flixel/group/FlxTypedSpriteContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxPoint_Impl_
#include <flixel/math/_FlxPoint/FlxPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxVirtualStick
#include <flixel/ui/FlxVirtualStick.h>
#endif
#ifndef INCLUDED_flixel_ui_InvisibleCircleButton
#include <flixel/ui/InvisibleCircleButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonState_Impl_
#include <flixel/ui/_FlxButton/FlxButtonState_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxVirtualStick_CircleSprite_Impl_
#include <flixel/ui/_FlxVirtualStick/CircleSprite_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignalHandler
#include <flixel/util/_FlxSignal/FlxSignalHandler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_20575774bf7f30d0_85_new,"flixel.ui.FlxVirtualStick","new",0x93e17fe1,"flixel.ui.FlxVirtualStick.new","flixel/ui/FlxVirtualStick.hx",85,0xf07a354f)
HX_DEFINE_STACK_FRAME(_hx_pos_20575774bf7f30d0_86_new,"flixel.ui.FlxVirtualStick","new",0x93e17fe1,"flixel.ui.FlxVirtualStick.new","flixel/ui/FlxVirtualStick.hx",86,0xf07a354f)
HX_DEFINE_STACK_FRAME(_hx_pos_20575774bf7f30d0_87_new,"flixel.ui.FlxVirtualStick","new",0x93e17fe1,"flixel.ui.FlxVirtualStick.new","flixel/ui/FlxVirtualStick.hx",87,0xf07a354f)
HX_DEFINE_STACK_FRAME(_hx_pos_20575774bf7f30d0_22_new,"flixel.ui.FlxVirtualStick","new",0x93e17fe1,"flixel.ui.FlxVirtualStick.new","flixel/ui/FlxVirtualStick.hx",22,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_20575774bf7f30d0_91_destroy,"flixel.ui.FlxVirtualStick","destroy",0x68c830fb,"flixel.ui.FlxVirtualStick.destroy","flixel/ui/FlxVirtualStick.hx",91,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_20575774bf7f30d0_103_update,"flixel.ui.FlxVirtualStick","update",0xeb33bd28,"flixel.ui.FlxVirtualStick.update","flixel/ui/FlxVirtualStick.hx",103,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_20575774bf7f30d0_116_updateValue,"flixel.ui.FlxVirtualStick","updateValue",0xd24b8129,"flixel.ui.FlxVirtualStick.updateValue","flixel/ui/FlxVirtualStick.hx",116,0xf07a354f)
HX_LOCAL_STACK_FRAME(_hx_pos_20575774bf7f30d0_169_getStatus,"flixel.ui.FlxVirtualStick","getStatus",0xde1e36a9,"flixel.ui.FlxVirtualStick.getStatus","flixel/ui/FlxVirtualStick.hx",169,0xf07a354f)
namespace flixel{
namespace ui{

void FlxVirtualStick_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_radius, ::Dynamic baseGraphic, ::Dynamic thumbGraphic){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::ui::FlxVirtualStick,_gthis) HXARGC(0)
            		::String _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_20575774bf7f30d0_85_new)
HXLINE(  85)			return ::flixel::ui::_FlxButton::FlxButtonState_Impl__obj::toString(_gthis->button->status);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::ui::FlxVirtualStick,_gthis) HXARGC(0)
            		::String _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_20575774bf7f30d0_86_new)
HXLINE(  86)			return (((HX_("",00,00,00,00) + _gthis->base->x) + HX_(" | ",44,b4,18,00)) + _gthis->base->y);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::ui::FlxVirtualStick,_gthis) HXARGC(0)
            		::String _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_20575774bf7f30d0_87_new)
HXLINE(  87)			return (((HX_("",00,00,00,00) + _gthis->thumb->x) + HX_(" | ",44,b4,18,00)) + _gthis->thumb->y);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            		Float radius = __o_radius.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_20575774bf7f30d0_22_new)
HXLINE(  53)		this->dragging = false;
HXLINE(  48)		this->status = 0;
HXLINE(  47)		this->yStatus = 0;
HXLINE(  46)		this->xStatus = 0;
HXLINE(  44)		this->onMove =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE(  43)		this->onJustStop =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE(  42)		this->onJustMove =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE(  40)		this->deadzone = ((Float)0.1);
HXLINE(  37)		this->lerp = ((Float)0.25);
HXLINE(  25)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  25)		point->_inPool = false;
HXDLIN(  25)		this->value = point;
HXLINE(  65)		 ::flixel::ui::FlxVirtualStick _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  66)		super::__construct(x,y,null());
HXLINE(  68)		this->add((this->base = ::flixel::ui::_FlxVirtualStick::CircleSprite_Impl__obj::_new(0,0,baseGraphic,HX_("base",11,e8,10,41))));
HXLINE(  69)		this->add((this->thumb = ::flixel::ui::_FlxVirtualStick::CircleSprite_Impl__obj::_new(0,0,thumbGraphic,HX_("thumb",16,a2,92,0f))));
HXLINE(  71)		if ((radius <= 0)) {
HXLINE(  72)			radius = (( (Float)(this->base->frameWidth) ) * ((Float)0.5));
            		}
HXLINE(  73)		this->radius = radius;
HXLINE(  75)		 ::flixel::FlxSprite fh = this->base;
HXDLIN(  75)		fh->set_x((fh->x + radius));
HXLINE(  76)		 ::flixel::FlxSprite fh1 = this->base;
HXDLIN(  76)		fh1->set_y((fh1->y + radius));
HXLINE(  77)		 ::flixel::FlxSprite fh2 = this->thumb;
HXDLIN(  77)		fh2->set_x((fh2->x + radius));
HXLINE(  78)		 ::flixel::FlxSprite fh3 = this->thumb;
HXDLIN(  78)		fh3->set_y((fh3->y + radius));
HXLINE(  80)		this->add((this->button =  ::flixel::ui::InvisibleCircleButton_obj::__alloc( HX_CTX ,0,0,this->radius,null())));
HXLINE(  82)		this->set_moves(false);
HXLINE(  83)		this->set_solid(false);
HXLINE(  85)		::flixel::FlxG_obj::watch->addFunction(HX_("stick.state",73,64,1d,f3), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  86)		::flixel::FlxG_obj::watch->addFunction(HX_("base.x|y",18,10,38,e8), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  87)		::flixel::FlxG_obj::watch->addFunction(HX_("thumb.x|y",9d,b0,1f,f4), ::Dynamic(new _hx_Closure_2(_gthis)));
            	}

Dynamic FlxVirtualStick_obj::__CreateEmpty() { return new FlxVirtualStick_obj; }

void *FlxVirtualStick_obj::_hx_vtable = 0;

Dynamic FlxVirtualStick_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxVirtualStick_obj > _hx_result = new FlxVirtualStick_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxVirtualStick_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x1332aae3) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1332aae3;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x5f6ac8a1 || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void FlxVirtualStick_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_20575774bf7f30d0_91_destroy)
HXLINE(  92)		this->super::destroy();
HXLINE(  94)		this->thumb->destroy();
HXLINE(  95)		this->base->destroy();
HXLINE(  97)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->onJustMove->handlers);
HXLINE(  98)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->onJustStop->handlers);
HXLINE(  99)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->onMove->handlers);
            	}


void FlxVirtualStick_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_20575774bf7f30d0_103_update)
HXLINE( 104)		this->super::update(elapsed);
HXLINE( 106)		this->updateValue(this->value);
HXLINE( 108)		Float adjustedLerp = ::flixel::math::FlxMath_obj::getElapsedLerp(this->lerp,elapsed);
HXLINE( 109)		Float newX = (((this->x + this->radius) - (( (Float)(this->thumb->frameWidth) ) * ((Float)0.5))) + (this->value->x * this->radius));
HXLINE( 110)		Float newY = (((this->y + this->radius) - (( (Float)(this->thumb->frameWidth) ) * ((Float)0.5))) + (this->value->y * this->radius));
HXLINE( 111)		 ::flixel::FlxSprite fh = this->thumb;
HXDLIN( 111)		fh->set_x((fh->x + ((newX - this->thumb->x) * adjustedLerp)));
HXLINE( 112)		 ::flixel::FlxSprite fh1 = this->thumb;
HXDLIN( 112)		fh1->set_y((fh1->y + ((newY - this->thumb->y) * adjustedLerp)));
            	}


void FlxVirtualStick_obj::updateValue( ::flixel::math::FlxBasePoint pos){
            	HX_STACKFRAME(&_hx_pos_20575774bf7f30d0_116_updateValue)
HXLINE( 117)		Float oldX = this->value->x;
HXLINE( 118)		Float oldY = this->value->y;
HXLINE( 120)		if ((this->button->input->current == 2)) {
HXLINE( 121)			this->dragging = true;
            		}
            		else {
HXLINE( 122)			bool _hx_tmp;
HXDLIN( 122)			 ::flixel::input::FlxInput _this = this->button->input;
HXDLIN( 122)			bool _hx_tmp1;
HXDLIN( 122)			if ((_this->current != 0)) {
HXLINE( 122)				_hx_tmp1 = (_this->current == -1);
            			}
            			else {
HXLINE( 122)				_hx_tmp1 = true;
            			}
HXDLIN( 122)			if (_hx_tmp1) {
HXLINE( 122)				_hx_tmp = this->dragging;
            			}
            			else {
HXLINE( 122)				_hx_tmp = false;
            			}
HXDLIN( 122)			if (_hx_tmp) {
HXLINE( 123)				this->dragging = false;
            			}
            		}
HXLINE( 125)		 ::flixel::math::FlxBasePoint pos1 = this->value;
HXLINE( 126)		if (this->dragging) {
HXLINE( 128)			 ::flixel::ui::InvisibleCircleButton _hx_tmp2 = this->button;
HXDLIN( 128)			_hx_tmp2->calcDeltaToPointer(this->getCameras()->__get(0).StaticCast<  ::flixel::FlxCamera >(),pos1);
HXLINE( 129)			{
HXLINE( 129)				Float amount = (( (Float)(1) ) / this->radius);
HXDLIN( 129)				pos1->set_x((pos1->x * amount));
HXDLIN( 129)				pos1->set_y((pos1->y * amount));
            			}
HXLINE( 130)			if ((((pos1->x * pos1->x) + (pos1->y * pos1->y)) > ((Float)1.0))) {
HXLINE( 131)				::flixel::math::_FlxPoint::FlxPoint_Impl__obj::normalize(pos1);
            			}
HXLINE( 133)			bool _hx_tmp3;
HXDLIN( 133)			if ((pos1->x < this->deadzone)) {
HXLINE( 133)				_hx_tmp3 = (pos1->x > -(this->deadzone));
            			}
            			else {
HXLINE( 133)				_hx_tmp3 = false;
            			}
HXDLIN( 133)			if (_hx_tmp3) {
HXLINE( 134)				pos1->set_x(( (Float)(0) ));
            			}
HXLINE( 136)			bool _hx_tmp4;
HXDLIN( 136)			if ((pos1->y < this->deadzone)) {
HXLINE( 136)				_hx_tmp4 = (pos1->y > -(this->deadzone));
            			}
            			else {
HXLINE( 136)				_hx_tmp4 = false;
            			}
HXDLIN( 136)			if (_hx_tmp4) {
HXLINE( 137)				pos1->set_y(( (Float)(0) ));
            			}
            		}
            		else {
HXLINE( 140)			pos1->set_x(pos1->set_y(( (Float)(0) )));
            		}
HXLINE( 142)		this->xStatus = this->getStatus(oldX,this->value->x);
HXLINE( 143)		this->yStatus = this->getStatus(oldY,this->value->y);
HXLINE( 145)		bool _hx_tmp5;
HXDLIN( 145)		bool _hx_tmp6;
HXDLIN( 145)		if ((this->yStatus == 2)) {
HXLINE( 145)			_hx_tmp6 = (this->xStatus == 0);
            		}
            		else {
HXLINE( 145)			_hx_tmp6 = false;
            		}
HXDLIN( 145)		if (!(_hx_tmp6)) {
HXLINE( 145)			if ((this->xStatus == 2)) {
HXLINE( 145)				_hx_tmp5 = (this->yStatus == 0);
            			}
            			else {
HXLINE( 145)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE( 145)			_hx_tmp5 = true;
            		}
HXDLIN( 145)		if (_hx_tmp5) {
HXLINE( 147)			this->status = 2;
HXLINE( 148)			this->onJustMove->dispatch();
HXLINE( 149)			this->onMove->dispatch();
            		}
            		else {
HXLINE( 151)			bool _hx_tmp7;
HXDLIN( 151)			bool _hx_tmp8;
HXDLIN( 151)			if ((this->yStatus == -1)) {
HXLINE( 151)				int this1 = this->xStatus;
HXDLIN( 151)				if ((this1 != 0)) {
HXLINE( 151)					_hx_tmp8 = (this1 == -1);
            				}
            				else {
HXLINE( 151)					_hx_tmp8 = true;
            				}
            			}
            			else {
HXLINE( 151)				_hx_tmp8 = false;
            			}
HXDLIN( 151)			if (!(_hx_tmp8)) {
HXLINE( 151)				if ((this->xStatus == -1)) {
HXLINE( 151)					int this2 = this->yStatus;
HXDLIN( 151)					if ((this2 != 0)) {
HXLINE( 151)						_hx_tmp7 = (this2 == -1);
            					}
            					else {
HXLINE( 151)						_hx_tmp7 = true;
            					}
            				}
            				else {
HXLINE( 151)					_hx_tmp7 = false;
            				}
            			}
            			else {
HXLINE( 151)				_hx_tmp7 = true;
            			}
HXDLIN( 151)			if (_hx_tmp7) {
HXLINE( 153)				this->status = -1;
HXLINE( 154)				this->onJustStop->dispatch();
            			}
            			else {
HXLINE( 156)				bool _hx_tmp9;
HXDLIN( 156)				int this3 = this->xStatus;
HXDLIN( 156)				bool _hx_tmp10;
HXDLIN( 156)				if ((this3 != 1)) {
HXLINE( 156)					_hx_tmp10 = (this3 == 2);
            				}
            				else {
HXLINE( 156)					_hx_tmp10 = true;
            				}
HXDLIN( 156)				if (!(_hx_tmp10)) {
HXLINE( 156)					int this4 = this->yStatus;
HXDLIN( 156)					if ((this4 != 1)) {
HXLINE( 156)						_hx_tmp9 = (this4 == 2);
            					}
            					else {
HXLINE( 156)						_hx_tmp9 = true;
            					}
            				}
            				else {
HXLINE( 156)					_hx_tmp9 = true;
            				}
HXDLIN( 156)				if (_hx_tmp9) {
HXLINE( 158)					this->status = 1;
HXLINE( 159)					this->onMove->dispatch();
            				}
            				else {
HXLINE( 163)					this->status = 0;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxVirtualStick_obj,updateValue,(void))

int FlxVirtualStick_obj::getStatus(Float prev,Float curr){
            	HX_STACKFRAME(&_hx_pos_20575774bf7f30d0_169_getStatus)
HXDLIN( 169)		bool _hx_tmp;
HXDLIN( 169)		if ((prev == 0)) {
HXDLIN( 169)			_hx_tmp = (curr != 0);
            		}
            		else {
HXDLIN( 169)			_hx_tmp = false;
            		}
HXDLIN( 169)		if (_hx_tmp) {
HXLINE( 170)			return 2;
            		}
            		else {
HXLINE( 171)			bool _hx_tmp1;
HXDLIN( 171)			if ((prev != 0)) {
HXLINE( 171)				_hx_tmp1 = (curr != 0);
            			}
            			else {
HXLINE( 171)				_hx_tmp1 = false;
            			}
HXDLIN( 171)			if (_hx_tmp1) {
HXLINE( 172)				return 1;
            			}
            			else {
HXLINE( 173)				bool _hx_tmp2;
HXDLIN( 173)				if ((prev != 0)) {
HXLINE( 173)					_hx_tmp2 = (curr == 0);
            				}
            				else {
HXLINE( 173)					_hx_tmp2 = false;
            				}
HXDLIN( 173)				if (_hx_tmp2) {
HXLINE( 174)					return -1;
            				}
            				else {
HXLINE( 175)					bool _hx_tmp3;
HXDLIN( 175)					if ((prev == 0)) {
HXLINE( 175)						_hx_tmp3 = (curr == 0);
            					}
            					else {
HXLINE( 175)						_hx_tmp3 = false;
            					}
HXDLIN( 175)					if (_hx_tmp3) {
HXLINE( 176)						return 0;
            					}
            					else {
HXLINE( 178)						HX_STACK_DO_THROW((((HX_("Unexpected case - prev: ",ed,10,4c,ce) + prev) + HX_(", curr:",14,3e,74,3f)) + curr));
            					}
            				}
            			}
            		}
HXLINE( 169)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxVirtualStick_obj,getStatus,return )


::hx::ObjectPtr< FlxVirtualStick_obj > FlxVirtualStick_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_radius, ::Dynamic baseGraphic, ::Dynamic thumbGraphic) {
	::hx::ObjectPtr< FlxVirtualStick_obj > __this = new FlxVirtualStick_obj();
	__this->__construct(__o_x,__o_y,__o_radius,baseGraphic,thumbGraphic);
	return __this;
}

::hx::ObjectPtr< FlxVirtualStick_obj > FlxVirtualStick_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_radius, ::Dynamic baseGraphic, ::Dynamic thumbGraphic) {
	FlxVirtualStick_obj *__this = (FlxVirtualStick_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxVirtualStick_obj), true, "flixel.ui.FlxVirtualStick"));
	*(void **)__this = FlxVirtualStick_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_radius,baseGraphic,thumbGraphic);
	return __this;
}

FlxVirtualStick_obj::FlxVirtualStick_obj()
{
}

void FlxVirtualStick_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxVirtualStick);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(thumb,"thumb");
	HX_MARK_MEMBER_NAME(base,"base");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(lerp,"lerp");
	HX_MARK_MEMBER_NAME(deadzone,"deadzone");
	HX_MARK_MEMBER_NAME(onJustMove,"onJustMove");
	HX_MARK_MEMBER_NAME(onJustStop,"onJustStop");
	HX_MARK_MEMBER_NAME(onMove,"onMove");
	HX_MARK_MEMBER_NAME(xStatus,"xStatus");
	HX_MARK_MEMBER_NAME(yStatus,"yStatus");
	HX_MARK_MEMBER_NAME(status,"status");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(dragging,"dragging");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxVirtualStick_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(thumb,"thumb");
	HX_VISIT_MEMBER_NAME(base,"base");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(lerp,"lerp");
	HX_VISIT_MEMBER_NAME(deadzone,"deadzone");
	HX_VISIT_MEMBER_NAME(onJustMove,"onJustMove");
	HX_VISIT_MEMBER_NAME(onJustStop,"onJustStop");
	HX_VISIT_MEMBER_NAME(onMove,"onMove");
	HX_VISIT_MEMBER_NAME(xStatus,"xStatus");
	HX_VISIT_MEMBER_NAME(yStatus,"yStatus");
	HX_VISIT_MEMBER_NAME(status,"status");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(dragging,"dragging");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxVirtualStick_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"base") ) { return ::hx::Val( base ); }
		if (HX_FIELD_EQ(inName,"lerp") ) { return ::hx::Val( lerp ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		if (HX_FIELD_EQ(inName,"thumb") ) { return ::hx::Val( thumb ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return ::hx::Val( radius ); }
		if (HX_FIELD_EQ(inName,"onMove") ) { return ::hx::Val( onMove ); }
		if (HX_FIELD_EQ(inName,"status") ) { return ::hx::Val( status ); }
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xStatus") ) { return ::hx::Val( xStatus ); }
		if (HX_FIELD_EQ(inName,"yStatus") ) { return ::hx::Val( yStatus ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { return ::hx::Val( deadzone ); }
		if (HX_FIELD_EQ(inName,"dragging") ) { return ::hx::Val( dragging ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getStatus") ) { return ::hx::Val( getStatus_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onJustMove") ) { return ::hx::Val( onJustMove ); }
		if (HX_FIELD_EQ(inName,"onJustStop") ) { return ::hx::Val( onJustStop ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateValue") ) { return ::hx::Val( updateValue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxVirtualStick_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"base") ) { base=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerp") ) { lerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"thumb") ) { thumb=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMove") ) { onMove=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"status") ) { status=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::ui::InvisibleCircleButton >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xStatus") ) { xStatus=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yStatus") ) { yStatus=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { deadzone=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragging") ) { dragging=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onJustMove") ) { onJustMove=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onJustStop") ) { onJustStop=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxVirtualStick_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("thumb",16,a2,92,0f));
	outFields->push(HX_("base",11,e8,10,41));
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("lerp",77,12,b0,47));
	outFields->push(HX_("deadzone",d0,12,55,6d));
	outFields->push(HX_("onJustMove",9c,33,a9,86));
	outFields->push(HX_("onJustStop",8d,40,a4,8a));
	outFields->push(HX_("onMove",d0,eb,ea,ea));
	outFields->push(HX_("xStatus",ca,05,a0,b8));
	outFields->push(HX_("yStatus",8b,7c,35,e2));
	outFields->push(HX_("status",32,e7,fb,05));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("dragging",cf,3c,8c,37));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxVirtualStick_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxVirtualStick_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxVirtualStick_obj,thumb),HX_("thumb",16,a2,92,0f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxVirtualStick_obj,base),HX_("base",11,e8,10,41)},
	{::hx::fsFloat,(int)offsetof(FlxVirtualStick_obj,radius),HX_("radius",52,d0,f6,b0)},
	{::hx::fsFloat,(int)offsetof(FlxVirtualStick_obj,lerp),HX_("lerp",77,12,b0,47)},
	{::hx::fsFloat,(int)offsetof(FlxVirtualStick_obj,deadzone),HX_("deadzone",d0,12,55,6d)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(FlxVirtualStick_obj,onJustMove),HX_("onJustMove",9c,33,a9,86)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(FlxVirtualStick_obj,onJustStop),HX_("onJustStop",8d,40,a4,8a)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(FlxVirtualStick_obj,onMove),HX_("onMove",d0,eb,ea,ea)},
	{::hx::fsInt,(int)offsetof(FlxVirtualStick_obj,xStatus),HX_("xStatus",ca,05,a0,b8)},
	{::hx::fsInt,(int)offsetof(FlxVirtualStick_obj,yStatus),HX_("yStatus",8b,7c,35,e2)},
	{::hx::fsInt,(int)offsetof(FlxVirtualStick_obj,status),HX_("status",32,e7,fb,05)},
	{::hx::fsObject /*  ::flixel::ui::InvisibleCircleButton */ ,(int)offsetof(FlxVirtualStick_obj,button),HX_("button",f2,61,e0,d9)},
	{::hx::fsBool,(int)offsetof(FlxVirtualStick_obj,dragging),HX_("dragging",cf,3c,8c,37)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxVirtualStick_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxVirtualStick_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	HX_("thumb",16,a2,92,0f),
	HX_("base",11,e8,10,41),
	HX_("radius",52,d0,f6,b0),
	HX_("lerp",77,12,b0,47),
	HX_("deadzone",d0,12,55,6d),
	HX_("onJustMove",9c,33,a9,86),
	HX_("onJustStop",8d,40,a4,8a),
	HX_("onMove",d0,eb,ea,ea),
	HX_("xStatus",ca,05,a0,b8),
	HX_("yStatus",8b,7c,35,e2),
	HX_("status",32,e7,fb,05),
	HX_("button",f2,61,e0,d9),
	HX_("dragging",cf,3c,8c,37),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("updateValue",a8,e8,50,17),
	HX_("getStatus",68,70,52,82),
	::String(null()) };

::hx::Class FlxVirtualStick_obj::__mClass;

void FlxVirtualStick_obj::__register()
{
	FlxVirtualStick_obj _hx_dummy;
	FlxVirtualStick_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.ui.FlxVirtualStick",6f,fb,91,5b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxVirtualStick_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxVirtualStick_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxVirtualStick_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxVirtualStick_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
